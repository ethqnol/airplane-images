---
import '../styles/gallery.css';
import { isAdmin } from '../lib/auth';

interface Props {
  userId?: string;
  aircraftType?: string;
  titleSearch?: string;
}

const { userId, aircraftType, titleSearch } = Astro.props;
const user = Astro.locals.user;
const showAdminControls = isAdmin(user);

const params = new URLSearchParams({
  page: '1',
  limit: '12',
});

if (userId) params.append('userId', userId);
if (aircraftType) params.append('aircraftType', aircraftType);
if (titleSearch) params.append('title', titleSearch);

const baseUrl = Astro.url.origin;
const response = await fetch(`${baseUrl}/api/images?${params}`).catch(() => null);
const data = response?.ok ? await response.json() : { images: [], pagination: null };
const { images = [], pagination = null } = data;

function formatDate(dateString: string) {
  if (!dateString) return 'Unknown date';
  
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
      return 'Invalid date';
    }
    
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  } catch (error) {
    return 'Invalid date';
  }
}
---

<div class="gallery-container">
  {images.length === 0 ? (
    <div class="no-images">
      <p>No images found.</p>
    </div>
  ) : (
    <>
      <div class="image-grid">
        {images.map((image: any) => (
          <div class="image-card" data-image-id={image.id}>
            <img
              src={`/api/images/${image.r2_key}`}
              alt={image.title || image.original_name}
              loading="lazy"
            />
            <div class="image-info">
              <h3>{image.title || image.original_name}</h3>
              {image.aircraft_type && (
                <p class="aircraft-type">{image.aircraft_type}</p>
              )}
              <div class="meta">
                <span class="user">{image.user_name}</span>
                <span class="date">{formatDate(image.uploaded_at)}</span>
                {showAdminControls && (
                  <button class="admin-delete-btn" data-image-id={image.id} data-image-title={image.title || image.original_name}>
                    Delete
                  </button>
                )}
              </div>
            </div>
            
            <script is:inline type="application/json" class="image-data" set:html={JSON.stringify({
              id: image.id,
              r2_key: image.r2_key,
              title: image.title || image.original_name,
              description: image.description,
              aircraft_type: image.aircraft_type,
              location: image.location,
              date_taken: image.date_taken,
              user_name: image.user_name,
              uploaded_at: image.uploaded_at
            })}></script>
          </div>
        ))}
      </div>

      {pagination && pagination.totalPages > 1 && (
        <div class="pagination">
          {pagination.hasPrev && (
            <a href={`?${new URLSearchParams({...Object.fromEntries(new URLSearchParams(Astro.url.search)), page: (pagination.page - 1).toString()}).toString()}`} class="page-btn">
              ← Previous
            </a>
          )}
          
          <span class="page-info">
            Page {pagination.page} of {pagination.totalPages}
          </span>
          
          {pagination.hasNext && (
            <a href={`?${new URLSearchParams({...Object.fromEntries(new URLSearchParams(Astro.url.search)), page: (pagination.page + 1).toString()}).toString()}`} class="page-btn">
              Next →
            </a>
          )}
        </div>
      )}
    </>
  )}

  <!-- Modal -->
  <div id="modal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
      <button class="modal-close" id="modalClose">×</button>
      
      <img id="modalImage" src="" alt="" />
      
      <div class="modal-info">
        <h2 id="modalTitle"></h2>
        <p id="modalDescription" class="description" style="display: none;"></p>
        
        <div class="details" id="modalDetails">
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .gallery-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .no-images {
    text-align: center;
    padding: 4rem;
    color: #a1a1aa;
  }

  .image-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .image-card {
    background: #18181b;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    cursor: pointer;
    transition: transform 0.2s, box-shadow 0.2s;
    border: 1px solid #27272a;
  }

  .image-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0,0,0,0.5);
    border-color: #3f3f46;
  }

  .image-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }

  .image-info {
    padding: 1rem;
  }

  .image-info h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
    color: #f4f4f5;
    line-height: 1.3;
  }

  .aircraft-type {
    margin: 0 0 0.75rem 0;
    color: #60a5fa;
    font-weight: 500;
    font-size: 0.9rem;
  }

  .meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.8rem;
    color: #a1a1aa;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .admin-delete-btn {
    background: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    cursor: pointer;
    transition: background-color 0.2s;
    margin-left: auto;
  }

  .admin-delete-btn:hover {
    background: #c82333;
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2rem;
  }

  .page-btn {
    padding: 0.75rem 1.5rem;
    background: #2563eb;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: background-color 0.2s;
  }

  .page-btn:hover {
    background: #1d4ed8;
  }

  .page-info {
    font-weight: 500;
    color: #e4e4e7;
  }

  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    padding: 2rem;
  }

  .modal-content {
    background: #18181b;
    border-radius: 12px;
    max-width: 1200px;
    width: 90vw;
    max-height: 90vh;
    overflow: hidden;
    position: relative;
    display: grid;
    grid-template-columns: 1fr 400px;
    border: 1px solid #27272a;
  }

  .modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(0,0,0,0.5);
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    font-size: 1.5rem;
    cursor: pointer;
    z-index: 1001;
  }

  .modal-content img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    background: #09090b;
    border-top-left-radius: 12px;
    border-bottom-left-radius: 12px;
  }

  .modal-info {
    padding: 2rem;
    overflow-y: auto;
    border-top-right-radius: 12px;
    border-bottom-right-radius: 12px;
  }

  .modal-info h2 {
    margin-top: 0;
    color: #f4f4f5;
  }

  .description {
    color: #dddddd;
    line-height: 1.6;
    margin-bottom: 1.5rem;
  }

  .details {
    display: grid;
    gap: 0.75rem;
  }

  .detail {
    display: flex;
    gap: 0.5rem;
  }

  .detail strong {
    min-width: 100px;
    color: #e4e4e7;
  }

  @media (max-width: 768px) {
    .gallery-container {
      padding: 1rem;
    }

    .image-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1rem;
    }

    .pagination {
      flex-direction: column;
      gap: 1rem;
    }

    .modal-overlay {
      padding: 1rem;
    }

    .modal-content {
      grid-template-columns: 1fr;
      grid-template-rows: 1fr auto;
      max-height: 90vh;
    }

    .modal-content img {
      border-radius: 0;
      border-top-left-radius: 12px;
      border-top-right-radius: 12px;
    }

    .modal-info {
      padding: 1rem;
      border-radius: 0;
      border-bottom-left-radius: 12px;
      border-bottom-right-radius: 12px;
    }
  }
</style>

<script>
  function formatDate(dateString: string) {
    if (!dateString) return 'Unknown date';
    
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        return 'Invalid date';
      }
      
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
      });
    } catch (error) {
      return 'Invalid date';
    }
  }

  const imageCards = document.querySelectorAll('.image-card');
  const modal = document.getElementById('modal');
  const modalClose = document.getElementById('modalClose');
  const modalImage = document.getElementById('modalImage') as HTMLImageElement;
  const modalTitle = document.getElementById('modalTitle');
  const modalDescription = document.getElementById('modalDescription');
  const modalDetails = document.getElementById('modalDetails');

  imageCards.forEach(card => {
    card.addEventListener('click', () => {
      const dataScript = card.querySelector('.image-data');
      if (dataScript) {
        const imageData = JSON.parse(dataScript.textContent || '{}');
        
        modalImage!.src = `/api/images/${imageData.r2_key}`;
        modalImage!.alt = imageData.title;
        modalTitle!.textContent = imageData.title;
        
        if (imageData.description) {
          modalDescription!.textContent = imageData.description;
          modalDescription!.style.display = 'block';
        } else {
          modalDescription!.style.display = 'none';
        }
        
        let detailsHTML = '';
        
        if (imageData.aircraft_type) {
          detailsHTML += `<div class="detail"><strong>Aircraft:</strong> <span>${imageData.aircraft_type}</span></div>`;
        }
        
        if (imageData.location) {
          detailsHTML += `<div class="detail"><strong>Location:</strong> <span>${imageData.location}</span></div>`;
        }
        
        if (imageData.date_taken) {
          detailsHTML += `<div class="detail"><strong>Date Taken:</strong> <span>${formatDate(imageData.date_taken)}</span></div>`;
        }
        
        detailsHTML += `<div class="detail"><strong>Uploaded by:</strong> <span>${imageData.user_name}</span></div>`;
        detailsHTML += `<div class="detail"><strong>Uploaded:</strong> <span>${formatDate(imageData.uploaded_at)}</span></div>`;
        
        modalDetails!.innerHTML = detailsHTML;
        modal!.style.display = 'flex';
      }
    });
  });

  modalClose?.addEventListener('click', () => {
    modal!.style.display = 'none';
  });

  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.style.display = 'none';
    }
  });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal!.style.display === 'flex') {
      modal!.style.display = 'none';
    }
  });

  // Handle admin delete buttons
  document.querySelectorAll('.admin-delete-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      e.stopPropagation();
      
      const imageId = btn.getAttribute('data-image-id');
      const imageTitle = btn.getAttribute('data-image-title');
      
      if (!confirm(`Are you sure you want to delete "${imageTitle}"? This action cannot be undone.`)) {
        return;
      }
      
      try {
        const response = await fetch(`/api/admin/delete-image/${imageId}`, {
          method: 'DELETE',
          credentials: 'same-origin'
        });
        
        if (response.ok) {
          // Remove the image card from the DOM
          const imageCard = btn.closest('.image-card');
          if (imageCard) {
            imageCard.remove();
          }
          
          // Check if page is now empty
          const remainingCards = document.querySelectorAll('.image-card');
          if (remainingCards.length === 0) {
            window.location.reload();
          }
        } else {
          alert('Failed to delete image. Please try again.');
        }
      } catch (error) {
        console.error('Error deleting image:', error);
        alert('Failed to delete image. Please try again.');
      }
    });
  });
</script>