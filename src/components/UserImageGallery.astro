---
import '../styles/gallery.css';

interface Props {
  userId: string;
}

const { userId } = Astro.props;


const params = new URLSearchParams({
  page: '1',
  limit: '12',
  userId: userId,
});

const baseUrl = Astro.url.origin;
console.log('UserImageGallery - Fetching with params:', params.toString());
console.log('UserImageGallery - UserId in params:', userId);
const response = await fetch(`${baseUrl}/api/images?${params}`).catch(() => null);
const data = response?.ok ? await response.json() : { images: [], pagination: null };
const { images = [], pagination = null } = data;
console.log('UserImageGallery - Received images count:', images?.length || 0);
console.log('UserImageGallery - Sample image:', images?.[0] ? { id: images[0].id, user_id: images[0].user_id, title: images[0].title } : 'none');

function formatDate(dateString: string) {
  if (!dateString) return 'Unknown date';
  
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
      return 'Invalid date';
    }
    
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  } catch (error) {
    return 'Invalid date';
  }
}
---

<div class="gallery-container user-gallery">
  {images.length === 0 ? (
    <div class="no-images">
      <p>You haven't uploaded any images yet.</p>
      <a href="/upload" class="upload-link">Upload your first image</a>
    </div>
  ) : (
    <>
      <div class="images-table">
        <div class="table-header">
          <div class="col-thumbnail">Image</div>
          <div class="col-title">Title</div>
          <div class="col-aircraft">Aircraft</div>
          <div class="col-date">Uploaded</div>
          <div class="col-actions">Actions</div>
        </div>
        {images.map((image: any) => (
          <div class="table-row" data-image-id={image.id}>
            <div class="col-thumbnail">
              <img
                src={`/api/images/${image.r2_key}`}
                alt={image.title || image.original_name}
                loading="lazy"
                class="thumbnail"
                onclick={`viewImageModal('${image.id}')`}
              />
            </div>
            <div class="col-title">
              <div class="title-text">{image.title || image.original_name}</div>
              {image.description && (
                <div class="description-text">{image.description}</div>
              )}
            </div>
            <div class="col-aircraft">
              {image.aircraft_type || '-'}
            </div>
            <div class="col-date">
              {formatDate(image.uploaded_at)}
            </div>
            <div class="col-actions">
              <button class="edit-btn" data-image-id={image.id}>Edit</button>
              <button class="delete-btn" data-image-id={image.id} data-image-title={image.title || image.original_name}>Delete</button>
            </div>
            
            <script type="application/json" class="image-data" set:html={JSON.stringify({
              id: image.id,
              r2_key: image.r2_key,
              title: image.title || image.original_name,
              description: image.description,
              aircraft_type: image.aircraft_type,
              location: image.location,
              date_taken: image.date_taken,
              user_name: image.user_name,
              uploaded_at: image.uploaded_at,
              is_owner: true
            })}></script>
          </div>
        ))}
      </div>

      {pagination && pagination.totalPages > 1 && (
        <div class="pagination">
          {pagination.hasPrev && (
            <a href={`?${new URLSearchParams({...Object.fromEntries(new URLSearchParams(Astro.url.search)), page: (pagination.page - 1).toString()}).toString()}`} class="page-btn">
              ← Previous
            </a>
          )}
          
          <span class="page-info">
            Page {pagination.page} of {pagination.totalPages}
          </span>
          
          {pagination.hasNext && (
            <a href={`?${new URLSearchParams({...Object.fromEntries(new URLSearchParams(Astro.url.search)), page: (pagination.page + 1).toString()}).toString()}`} class="page-btn">
              Next →
            </a>
          )}
        </div>
      )}
    </>
  )}

  <!-- Enhanced Modal -->
  <div id="modal" class="modal-overlay" style="display: none;">
    <div class="modal-content enhanced">
      <button class="modal-close" id="modalClose">×</button>
      
      <img id="modalImage" src="" alt="" />
      
      <div class="modal-info">
        <div class="modal-header">
          <h2 id="modalTitle"></h2>
          <div class="modal-actions" id="modalActions" style="display: none;">
            <button class="edit-modal-btn" id="editModalBtn">Edit</button>
            <button class="delete-modal-btn" id="deleteModalBtn">Delete</button>
          </div>
        </div>
        <p id="modalDescription" class="description" style="display: none;"></p>
        
        <div class="details" id="modalDetails">
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Modal -->
  <div id="editModal" class="modal-overlay" style="display: none;">
    <div class="modal-content edit-modal">
      <h3>Edit Image Details</h3>
      <form id="editForm">
        <div class="form-group">
          <label for="editTitle">Title:</label>
          <input type="text" id="editTitle" name="title" maxlength="200">
        </div>
        <div class="form-group">
          <label for="editDescription">Description:</label>
          <textarea id="editDescription" name="description" rows="3" maxlength="1000"></textarea>
        </div>
        <div class="form-group">
          <label for="editAircraftType">Aircraft Type:</label>
          <input type="text" id="editAircraftType" name="aircraftType" maxlength="50">
        </div>
        <div class="form-group">
          <label for="editLocation">Location:</label>
          <input type="text" id="editLocation" name="location" maxlength="100">
        </div>
        <div class="form-group">
          <label for="editDateTaken">Date Taken:</label>
          <input type="date" id="editDateTaken" name="dateTaken">
        </div>
        <div class="form-actions">
          <button type="button" class="cancel-btn" id="cancelEditBtn">Cancel</button>
          <button type="submit" class="save-btn">Save Changes</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteModal" class="modal-overlay" style="display: none;">
    <div class="modal-content delete-modal">
      <h3>Delete Image</h3>
      <p>Are you sure you want to delete "<span id="deleteImageTitle"></span>"?</p>
      <p class="warning">This action cannot be undone.</p>
      <div class="delete-actions">
        <button class="cancel-btn" id="cancelDeleteBtn">Cancel</button>
        <button class="confirm-delete-btn" id="confirmDeleteBtn">Delete</button>
      </div>
    </div>
  </div>
</div>

<style>
  .gallery-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .no-images {
    text-align: center;
    padding: 4rem;
    color: #a1a1aa;
  }

  .upload-link {
    display: inline-block;
    margin-top: 1rem;
    padding: 0.75rem 1.5rem;
    background: #2563eb;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: background-color 0.2s;
  }

  .upload-link:hover {
    background: #1d4ed8;
  }

  .images-table {
    background: #18181b;
    border-radius: 12px;
    border: 1px solid #27272a;
    overflow: hidden;
    margin-bottom: 3rem;
  }

  .table-header {
    display: grid;
    grid-template-columns: 80px 1fr 150px 120px 140px;
    gap: 1rem;
    padding: 1rem;
    background: #27272a;
    font-weight: 600;
    color: #f4f4f5;
    font-size: 0.9rem;
    border-bottom: 1px solid #3f3f46;
  }

  .table-row {
    display: grid;
    grid-template-columns: 80px 1fr 150px 120px 140px;
    gap: 1rem;
    padding: 1rem;
    border-bottom: 1px solid #27272a;
    align-items: center;
    transition: background-color 0.2s;
  }

  .table-row:hover {
    background: rgba(39, 39, 42, 0.5);
  }

  .table-row:last-child {
    border-bottom: none;
  }

  .thumbnail {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 6px;
    cursor: pointer;
    transition: transform 0.2s;
  }

  .thumbnail:hover {
    transform: scale(1.1);
  }

  .title-text {
    font-weight: 500;
    color: #f4f4f5;
    margin-bottom: 0.25rem;
    font-size: 0.95rem;
  }

  .description-text {
    color: #a1a1aa;
    font-size: 0.8rem;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .col-aircraft {
    color: #60a5fa;
    font-weight: 500;
    font-size: 0.9rem;
  }

  .col-date {
    color: #a1a1aa;
    font-size: 0.85rem;
  }

  .action-buttons {
    display: flex;
    gap: 0.5rem;
  }

  .edit-btn {
    background: #2563eb;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .edit-btn:hover {
    background: #1d4ed8;
  }

  .delete-btn {
    background: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .delete-btn:hover {
    background: #c82333;
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2rem;
  }

  .page-btn {
    padding: 0.75rem 1.5rem;
    background: #2563eb;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: background-color 0.2s;
  }

  .page-btn:hover {
    background: #1d4ed8;
  }

  .page-info {
    font-weight: 500;
    color: #e4e4e7;
  }

  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    padding: 2rem;
  }

  .modal-content {
    background: #18181b;
    border-radius: 12px;
    max-width: 90vw;
    max-height: 90vh;
    overflow: hidden;
    position: relative;
    display: flex;
    flex-direction: column;
    border: 1px solid #27272a;
  }

  .modal-content.enhanced {
    max-width: 1200px;
    width: 90vw;
    max-height: 90vh;
    display: grid;
    grid-template-columns: 1fr 400px;
    overflow: hidden;
  }

  .modal-content.enhanced img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    background: #09090b;
    border-top-left-radius: 12px;
    border-bottom-left-radius: 12px;
  }

  .modal-info {
    padding: 2rem;
    overflow-y: auto;
    border-top-right-radius: 12px;
    border-bottom-right-radius: 12px;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
  }

  .modal-header h2 {
    margin: 0;
    color: #f4f4f5;
    flex: 1;
    margin-right: 1rem;
  }

  .modal-actions {
    display: flex;
    gap: 0.5rem;
    flex-shrink: 0;
  }

  .edit-modal-btn {
    background: #2563eb;
    color: white;
    border: none;
    border-radius: 6px;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .edit-modal-btn:hover {
    background: #1d4ed8;
  }

  .delete-modal-btn {
    background: #dc3545;
    color: white;
    border: none;
    border-radius: 6px;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .delete-modal-btn:hover {
    background: #c82333;
  }

  .modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(0,0,0,0.5);
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    font-size: 1.5rem;
    cursor: pointer;
    z-index: 1001;
  }

  .description {
    color: #a1a1aa;
    line-height: 1.6;
    margin-bottom: 1.5rem;
  }

  .details {
    display: grid;
    gap: 0.75rem;
  }

  .detail {
    display: flex;
    gap: 0.5rem;
  }

  .detail strong {
    min-width: 100px;
    color: #e4e4e7;
  }

  .edit-modal {
    max-width: 500px;
    width: 90vw;
    padding: 2rem;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #e4e4e7;
    font-weight: 500;
  }

  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #3f3f46;
    border-radius: 6px;
    background: #27272a;
    color: #f4f4f5;
    font-size: 0.9rem;
    box-sizing: border-box;
  }

  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: #2563eb;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    margin-top: 2rem;
  }

  .save-btn {
    padding: 0.75rem 1.5rem;
    background: #16a34a;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .save-btn:hover {
    background: #15803d;
  }

  .delete-modal {
    max-width: 400px;
    width: 90vw;
    padding: 2rem;
    text-align: center;
  }

  .delete-modal h3 {
    margin-top: 0;
    color: #f4f4f5;
  }

  .warning {
    color: #dc3545;
    font-weight: 500;
    margin-bottom: 2rem;
  }

  .delete-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
  }

  .cancel-btn {
    padding: 0.75rem 1.5rem;
    background: #52525b;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .cancel-btn:hover {
    background: #3f3f46;
  }

  .confirm-delete-btn {
    padding: 0.75rem 1.5rem;
    background: #dc3545;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .confirm-delete-btn:hover {
    background: #c82333;
  }

  @media (max-width: 768px) {
    .gallery-container {
      padding: 1rem;
    }

    .table-header,
    .table-row {
      grid-template-columns: 60px 1fr 100px 90px 110px;
      gap: 0.5rem;
      padding: 0.75rem;
    }

    .thumbnail {
      width: 50px;
      height: 50px;
    }

    .title-text {
      font-size: 0.85rem;
    }

    .description-text {
      font-size: 0.75rem;
    }

    .pagination {
      flex-direction: column;
      gap: 1rem;
    }

    .modal-overlay {
      padding: 1rem;
    }

    .modal-content.enhanced {
      grid-template-columns: 1fr;
      grid-template-rows: 1fr auto;
      max-height: 90vh;
    }

    .modal-content.enhanced img {
      border-radius: 0;
      border-top-left-radius: 12px;
      border-top-right-radius: 12px;
    }

    .modal-info {
      padding: 1rem;
      border-radius: 0;
      border-bottom-left-radius: 12px;
      border-bottom-right-radius: 12px;
    }

    .modal-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .modal-header h2 {
      margin-right: 0;
    }
  }
</style>

<script>
  function formatDate(dateString) {
    if (!dateString) return 'Unknown date';
    
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        return 'Invalid date';
      }
      
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
      });
    } catch (error) {
      return 'Invalid date';
    }
  }


  const tableRows = document.querySelectorAll('.table-row');
  const modal = document.getElementById('modal');
  const modalClose = document.getElementById('modalClose');
  const modalImage = document.getElementById('modalImage');
  const modalTitle = document.getElementById('modalTitle');
  const modalDescription = document.getElementById('modalDescription');
  const modalDetails = document.getElementById('modalDetails');
  const modalActions = document.getElementById('modalActions');
  const editModalBtn = document.getElementById('editModalBtn');
  const deleteModalBtn = document.getElementById('deleteModalBtn');

  // Edit modal elements
  const editModal = document.getElementById('editModal');
  const editForm = document.getElementById('editForm');
  const editTitle = document.getElementById('editTitle');
  const editDescription = document.getElementById('editDescription');
  const editAircraftType = document.getElementById('editAircraftType');
  const editLocation = document.getElementById('editLocation');
  const editDateTaken = document.getElementById('editDateTaken');
  const cancelEditBtn = document.getElementById('cancelEditBtn');

  // Delete modal elements
  const deleteModal = document.getElementById('deleteModal');
  const deleteImageTitle = document.getElementById('deleteImageTitle');
  const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
  const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

  let currentImageId = null;
  let currentImageData = null;

  function viewImageModal(imageId) {
    const row = document.querySelector(`[data-image-id="${imageId}"]`);
    if (row) {
      const dataScript = row.querySelector('.image-data');
      if (dataScript) {
        const imageData = JSON.parse(dataScript.textContent || '{}');
        
        modalImage.src = `/api/images/${imageData.r2_key}`;
        modalImage.alt = imageData.title;
        modalTitle.textContent = imageData.title;
        currentImageId = imageData.id;
        currentImageData = imageData;
        
        if (imageData.description) {
          modalDescription.textContent = imageData.description;
          modalDescription.style.display = 'block';
        } else {
          modalDescription.style.display = 'none';
        }
        
        let detailsHTML = '';
        
        if (imageData.aircraft_type) {
          detailsHTML += `<div class="detail"><strong>Aircraft:</strong> <span>${imageData.aircraft_type}</span></div>`;
        }
        
        if (imageData.location) {
          detailsHTML += `<div class="detail"><strong>Location:</strong> <span>${imageData.location}</span></div>`;
        }
        
        if (imageData.date_taken) {
          detailsHTML += `<div class="detail"><strong>Date Taken:</strong> <span>${formatDate(imageData.date_taken)}</span></div>`;
        }
        
        detailsHTML += `<div class="detail"><strong>Uploaded by:</strong> <span>${imageData.user_name}</span></div>`;
        detailsHTML += `<div class="detail"><strong>Uploaded:</strong> <span>${formatDate(imageData.uploaded_at)}</span></div>`;
        
        modalDetails.innerHTML = detailsHTML;

        if (imageData.is_owner) {
          modalActions.style.display = 'flex';
        } else {
          modalActions.style.display = 'none';
        }

        modal.style.display = 'flex';
      }
    }
  }

  // Make viewImageModal globally available
  window.viewImageModal = viewImageModal;



  // Handle edit button clicks
  document.querySelectorAll('.edit-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const imageId = btn.getAttribute('data-image-id');
      const card = btn.closest('.image-card');
      const dataScript = card.querySelector('.image-data');
      
      if (dataScript) {
        const imageData = JSON.parse(dataScript.textContent || '{}');
        currentImageId = imageId;
        currentImageData = imageData;
        
        // Populate edit form
        editTitle.value = imageData.title || '';
        editDescription.value = imageData.description || '';
        editAircraftType.value = imageData.aircraft_type || '';
        editLocation.value = imageData.location || '';
        if (imageData.date_taken) {
          const date = new Date(imageData.date_taken);
          editDateTaken.value = date.toISOString().split('T')[0];
        } else {
          editDateTaken.value = '';
        }
        
        editModal.style.display = 'flex';
      }
    });
  });

  // Handle delete button clicks
  document.querySelectorAll('.delete-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const imageId = btn.getAttribute('data-image-id');
      const imageTitle = btn.getAttribute('data-image-title');
      
      currentImageId = imageId;
      deleteImageTitle.textContent = imageTitle;
      deleteModal.style.display = 'flex';
    });
  });

  // Handle edit from modal
  editModalBtn?.addEventListener('click', () => {
    if (currentImageData) {
      // Populate edit form
      editTitle.value = currentImageData.title || '';
      editDescription.value = currentImageData.description || '';
      editAircraftType.value = currentImageData.aircraft_type || '';
      editLocation.value = currentImageData.location || '';
      if (currentImageData.date_taken) {
        const date = new Date(currentImageData.date_taken);
        editDateTaken.value = date.toISOString().split('T')[0];
      } else {
        editDateTaken.value = '';
      }
      
      modal.style.display = 'none';
      editModal.style.display = 'flex';
    }
  });

  // Handle delete from modal
  deleteModalBtn?.addEventListener('click', () => {
    if (currentImageId) {
      const imageTitle = modalTitle.textContent;
      deleteImageTitle.textContent = imageTitle;
      modal.style.display = 'none';
      deleteModal.style.display = 'flex';
    }
  });

  confirmDeleteBtn?.addEventListener('click', async () => {
    if (!currentImageId) return;

    try {
      const response = await fetch(`/api/images/${currentImageId}`, {
        method: 'DELETE',
      });

      if (response.ok) {

        const tableRow = document.querySelector(`[data-image-id="${currentImageId}"]`);
        if (tableRow) {
          tableRow.remove();
        }
        

        deleteModal.style.display = 'none';
        modal.style.display = 'none';
        

        const remainingRows = document.querySelectorAll('.table-row');
        if (remainingRows.length === 0) {
          window.location.reload();
        }
      } else {
        alert('Failed to delete image. Please try again.');
      }
    } catch (error) {
      console.error('Error deleting image:', error);
      alert('Failed to delete image. Please try again.');
    }

    currentImageId = null;
  });

  // Handle edit form submission
  editForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!currentImageId) return;

    try {
      const formData = new FormData(editForm);
      
      const response = await fetch(`/api/images/${currentImageId}`, {
        method: 'PATCH',
        body: formData
      });

      if (response.ok) {
        const result = await response.json();
        
        // Update the UI with new data
        const tableRow = document.querySelector(`[data-image-id="${currentImageId}"]`);
        if (tableRow) {
          const titleElement = tableRow.querySelector('.title-text');
          const descriptionElement = tableRow.querySelector('.description-text');
          const aircraftElement = tableRow.querySelector('.col-aircraft');
          const dataScript = tableRow.querySelector('.image-data');
          
          if (titleElement) {
            titleElement.textContent = result.image.title || result.image.original_name;
          }
          
          // Update or create description
          if (result.image.description) {
            if (!descriptionElement) {
              const newDescElement = document.createElement('div');
              newDescElement.className = 'description-text';
              newDescElement.textContent = result.image.description;
              titleElement.parentNode.appendChild(newDescElement);
            } else {
              descriptionElement.textContent = result.image.description;
            }
          } else if (descriptionElement) {
            descriptionElement.remove();
          }
          
          if (aircraftElement) {
            aircraftElement.textContent = result.image.aircraft_type || '-';
          }
          
          // Update the data script
          if (dataScript) {
            const updatedData = {
              id: result.image.id,
              r2_key: result.image.r2_key,
              title: result.image.title || result.image.original_name,
              description: result.image.description,
              aircraft_type: result.image.aircraft_type,
              location: result.image.location,
              date_taken: result.image.date_taken,
              user_name: result.image.user_name,
              uploaded_at: result.image.uploaded_at,
              is_owner: true
            };
            dataScript.textContent = JSON.stringify(updatedData);
          }
        }
        
        editModal.style.display = 'none';
        currentImageId = null;
        currentImageData = null;
      } else {
        alert('Failed to update image. Please try again.');
      }
    } catch (error) {
      console.error('Error updating image:', error);
      alert('Failed to update image. Please try again.');
    }
  });

  // Handle edit cancel
  cancelEditBtn?.addEventListener('click', () => {
    editModal.style.display = 'none';
    currentImageId = null;
    currentImageData = null;
  });


  cancelDeleteBtn?.addEventListener('click', () => {
    deleteModal.style.display = 'none';
    currentImageId = null;
  });


  modalClose?.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.style.display = 'none';
    }
  });

  editModal?.addEventListener('click', (e) => {
    if (e.target === editModal) {
      editModal.style.display = 'none';
    }
  });

  deleteModal?.addEventListener('click', (e) => {
    if (e.target === deleteModal) {
      deleteModal.style.display = 'none';
    }
  });


  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      if (modal.style.display === 'flex') {
        modal.style.display = 'none';
      }
      if (editModal.style.display === 'flex') {
        editModal.style.display = 'none';
      }
      if (deleteModal.style.display === 'flex') {
        deleteModal.style.display = 'none';
      }
    }
  });
</script>